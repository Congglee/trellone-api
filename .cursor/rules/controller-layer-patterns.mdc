---
description: Controller layer best practices for TrellOne API
globs: src/controllers/**/*
alwaysApply: true
---
# Controller Layer Best Practices - TrellOne API

This document outlines the established patterns and best practices for writing controllers in the TrellOne API Express.js application.

## File Structure and Naming

### ✅ Correct File Naming
- Use kebab-case with `.controllers.ts` suffix
- Match the resource name: `boards.controllers.ts`, `users.controllers.ts`
- Place all controller files in `src/controllers/` directory

### ✅ Controller Function Naming
```typescript
// Good - Descriptive action + Controller suffix
export const createBoardController = async (req: Request, res: Response) => {}
export const getBoardsController = async (req: Request, res: Response) => {}
export const updateBoardController = async (req: Request, res: Response) => {}
export const deleteColumnController = async (req: Request, res: Response) => {}

// Special operations use descriptive names
export const moveCardToDifferentColumnController = async (req: Request, res: Response) => {}
export const verifyBoardInvitationController = async (req: Request, res: Response) => {}
export const resendVerifyEmailController = async (req: Request, res: Response) => {}
```

## Import Organization

### ✅ Import Order and Grouping
```typescript
// 1. External packages - Express types
import { Request, Response } from 'express'
import { ParamsDictionary } from 'express-serve-static-core'

// 2. External packages - Other dependencies
import { ObjectId } from 'mongodb'
import ms from 'ms'

// 3. Internal config and constants
import { envConfig } from '~/config/environment'
import { UserVerifyStatus } from '~/constants/enums'
import HTTP_STATUS from '~/constants/httpStatus'
import { AUTH_MESSAGES } from '~/constants/messages'

// 4. Request/Response types
import {
  CreateBoardReqBody,
  UpdateBoardReqBody,
  BoardParams,
  BoardQuery
} from '~/models/requests/Board.requests'
import { TokenPayload } from '~/models/requests/User.requests'

// 5. Schema models
import User from '~/models/schemas/User.schema'
import Board from '~/models/schemas/Board.schema'

// 6. Services
import boardsService from '~/services/boards.services'
import authService from '~/services/auth.services'
import databaseService from '~/services/database.services'
```

## Controller Function Patterns

### ✅ Function Signature Standards
```typescript
// Basic CRUD operations
export const createResourceController = async (
  req: Request<ParamsDictionary, any, CreateResourceReqBody>, 
  res: Response
) => {}

export const getResourcesController = async (
  req: Request<ParamsDictionary, any, any, ResourceQuery>, 
  res: Response
) => {}

export const getResourceController = async (
  req: Request<ResourceParams>, 
  res: Response
) => {}

export const updateResourceController = async (
  req: Request<ResourceParams, any, UpdateResourceReqBody>, 
  res: Response
) => {}

export const deleteResourceController = async (
  req: Request<ResourceParams, any, any>, 
  res: Response
) => {}

// Special operations with descriptive names
export const specialOperationController = async (
  req: Request<ParamsDictionary, any, SpecialOperationReqBody>,
  res: Response
) => {}
```

### ✅ Request Type Definitions
```typescript
// Use specific typed parameters for different operations
Request<ParamsDictionary, any, ReqBody>           // Create operations
Request<ParamsDictionary, any, any, QueryParams>  // List operations with query
Request<ResourceParams>                           // Get single resource
Request<ResourceParams, any, UpdateReqBody>       // Update operations
Request<ResourceParams, any, any>                 // Delete operations
```

## Data Extraction Patterns

### ✅ User Authentication Data
```typescript
// Extract user_id from JWT token
const { user_id } = req.decoded_authorization as TokenPayload

// Extract specific token payloads
const { user_id, verify, exp } = req.decoded_refresh_token as TokenPayload
const { user_id } = req.decoded_email_verify_token as TokenPayload
const { user_id } = req.decoded_forgot_password_token as TokenPayload
```

### ✅ Request Data Extraction
```typescript
// Extract from request body
const { password } = req.body
const result = await service.method(req.body)

// Extract from request params
const { board_id } = req.params
const { card_id } = req.params

// Extract from query parameters
const limit = Number(req.query.limit)
const page = Number(req.query.page)
const { keyword } = req.query

// Extract from cookies
const { refresh_token } = req.cookies
const { access_token } = req.cookies
```

### ✅ Middleware-Attached Data
```typescript
// Use data attached by middleware
const user = req.user as User
const board = req.board as Board
const invitation = req.invitation as Invitation
const invitee = req.invitee as User

// Extract specific fields from attached data
const user_id = user._id as ObjectId
const board_id = (req.column as Column & { board_id: string }).board_id
```

## Service Layer Integration

### ✅ Service Method Calls
```typescript
// Pass extracted data to service layer
const result = await service.createResource(user_id, req.body)
const result = await service.updateResource(resource_id, req.body)
const result = await service.getResources({ user_id, limit, page, keyword })

// Complex operations with multiple parameters
const result = await service.complexOperation(param1, param2, extractedData, requestBody)

// Direct request body passing for simple operations
const result = await service.simpleOperation(req.body)
```

## Response Patterns

### ✅ Success Response Structure
```typescript
// Standard success response with message and result
return res.json({ 
  message: RESOURCE_MESSAGES.OPERATION_SUCCESS, 
  result 
})

// Success response with pagination metadata
return res.json({
  message: RESOURCE_MESSAGES.GET_RESOURCES_SUCCESS,
  result: {
    resources: result.resources,
    limit,
    page,
    total_page: Math.ceil(result.total / limit)
  }
})

// Simple success response without result data
return res.json({ message: RESOURCE_MESSAGES.OPERATION_SUCCESS })

// Response with service result directly
return res.json(result)
```

### ✅ Error Response Handling
```typescript
// Manual error responses for specific conditions
if (!user) {
  return res.status(HTTP_STATUS.NOT_FOUND).json({
    message: AUTH_MESSAGES.USER_NOT_FOUND
  })
}

if (user.email_verify_token === '') {
  return res.json({ message: AUTH_MESSAGES.EMAIL_ALREADY_VERIFIED_BEFORE })
}

// Let middleware handle most errors through service layer
```

## Cookie Management

### ✅ Cookie Setting Patterns
```typescript
// Set secure cookies with consistent options
res.cookie('access_token', result.access_token, {
  httpOnly: true,
  secure: true,
  sameSite: 'none',
  maxAge: ms('7 days')
})

res.cookie('refresh_token', result.refresh_token, {
  httpOnly: true,
  secure: true,
  sameSite: 'none',
  maxAge: ms('7 days')
})

// Clear cookies on logout
res.clearCookie('access_token')
res.clearCookie('refresh_token')
```

## Special Operation Patterns

### ✅ Authentication Controllers
```typescript
// Registration and login set cookies
export const loginController = async (req: Request, res: Response) => {
  const user = req.user as User
  const user_id = user._id as ObjectId
  
  const result = await authService.login({ user_id: user_id.toString(), verify: user.verify })
  
  // Set cookies before response
  res.cookie('access_token', result.access_token, cookieOptions)
  res.cookie('refresh_token', result.refresh_token, cookieOptions)
  
  return res.json({ message: AUTH_MESSAGES.LOGIN_SUCCESS, result })
}

// OAuth redirects after setting cookies
export const OAuthController = async (req: Request, res: Response) => {
  const { code } = req.query
  const result = await authService.oauth(code as string)
  
  const urlRedirect = `${envConfig.clientRedirectCallback}?access_token=${result.access_token}&refresh_token=${result.refresh_token}&new_user=${result.newUser}&verify=${result.verify}`
  
  res.cookie('access_token', result.access_token, cookieOptions)
  res.cookie('refresh_token', result.refresh_token, cookieOptions)
  
  return res.redirect(urlRedirect)
}
```

### ✅ List Controllers with Pagination
```typescript
export const getResourcesController = async (req: Request, res: Response) => {
  const user_id = req.decoded_authorization?.user_id as string
  const limit = Number(req.query.limit)
  const page = Number(req.query.page)
  
  const result = await service.getResources({ user_id, limit, page, keyword: req.query.keyword })
  
  return res.json({
    message: MESSAGES.GET_RESOURCES_SUCCESS,
    result: {
      resources: result.resources,
      limit,
      page,
      total_page: Math.ceil(result.total / limit)
    }
  })
}
```

### ✅ Update Controllers with Filtering
```typescript
export const updateResourceController = async (req: Request, res: Response) => {
  const { resource_id } = req.params
  // Additional data extraction as needed
  const { user_id } = req.decoded_authorization as TokenPayload
  
  const result = await service.updateResource(resource_id, user_id, req.body)
  
  return res.json({ message: MESSAGES.UPDATE_SUCCESS, result })
}
```

## Data Transformation Patterns

### ✅ Response Data Preparation
```typescript
// Spread operator for object copying
const result = { ...req.board }

// Combine data from multiple sources
const body = { ...invitation.board_invitation, status: req.body.status }

// Extract and transform IDs
const user_id = user._id as ObjectId
const result = await service.method({ user_id: user_id.toString(), verify: user.verify })
```

## Async/Await Patterns

### ✅ Consistent Async Handling
```typescript
// All controllers are async functions
export const controllerName = async (req: Request, res: Response) => {
  // Await service calls
  const result = await service.method(params)
  
  // Await database operations when needed
  const user = await databaseService.users.findOne({ _id: new ObjectId(user_id) })
  
  return res.json({ message: SUCCESS_MESSAGE, result })
}
```

## Error Handling Philosophy

### ✅ Controller Error Strategy
- **Let middleware handle most errors** - Don't wrap in try/catch
- **Manual checks only for specific business logic** - User existence, verification status
- **Use appropriate HTTP status codes** - 404 for not found, etc.
- **Consistent error message structure** - Use constants from messages files

## Constants Usage

### ✅ Message Constants
```typescript
// Import and use message constants
import { AUTH_MESSAGES, BOARDS_MESSAGES, USERS_MESSAGES } from '~/constants/messages'

// Use in responses
return res.json({ message: AUTH_MESSAGES.LOGIN_SUCCESS, result })
return res.json({ message: BOARDS_MESSAGES.CREATE_BOARD_SUCCESS, result })
```

### ✅ HTTP Status Constants
```typescript
// Import and use HTTP status constants
import HTTP_STATUS from '~/constants/httpStatus'

// Use for error responses
return res.status(HTTP_STATUS.NOT_FOUND).json({ message: ERROR_MESSAGE })
```

## Export Patterns

### ✅ Named Exports Only
```typescript
// Always use named exports for controllers
export const createResourceController = async (req: Request, res: Response) => {}
export const getResourceController = async (req: Request, res: Response) => {}
export const updateResourceController = async (req: Request, res: Response) => {}
export const deleteResourceController = async (req: Request, res: Response) => {}

// Never use default exports
```

These patterns ensure consistency, maintainability, and clear separation of concerns in the controller layer of the TrellOne API.
