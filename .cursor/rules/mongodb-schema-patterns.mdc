---
description: MongoDB schema best practices for TrellOne API
globs: src/models/schemas/**/*
alwaysApply: true
---
# MongoDB Schema Definition Best Practices - TrellOne API

This document outlines the established patterns and conventions for defining MongoDB collection schemas in the TrellOne API Express.js application.

## File Structure and Naming

### ✅ Schema File Organization
```typescript
src/models/schemas/
├── User.schema.ts           // PascalCase + .schema.ts suffix
├── Board.schema.ts          // Match collection name
├── Card.schema.ts           // Singular resource name
├── Column.schema.ts         // Descriptive entity name
├── Invitation.schema.ts     // Business domain entity
└── RefreshToken.schema.ts   // Compound names in PascalCase
```

### ✅ File Naming Convention
- Use **PascalCase** with `.schema.ts` suffix
- **Singular** resource names (User, not Users)
- Match the **business domain entity** name
- Place all schema files in `src/models/schemas/` directory

## Schema Definition Pattern

### ✅ Dual Interface + Class Pattern
Every schema file follows this exact structure:

```typescript
// 1. External imports first
import { ObjectId } from 'mongodb'

// 2. Internal enum imports
import { Role, UserVerifyStatus } from '~/constants/enums'

// 3. Extension imports (if needed)
import { Comment, Attachment } from '~/models/Extensions'

// 4. TypeScript interface for input validation
interface EntitySchema {
  _id?: ObjectId                    // Always optional ObjectId
  required_field: string           // Required fields without defaults
  optional_field?: string          // Optional fields with ? operator
  enum_field?: EnumType           // Enum fields with defaults
  array_field?: ObjectId[]        // Arrays with defaults
  nested_object?: ComplexType     // Complex nested objects
  _destroy?: boolean              // Soft delete flag
  created_at?: Date               // Timestamp fields
  updated_at?: Date               // Timestamp fields
}

// 5. Export default class implementation
export default class Entity {
  // All fields as class properties (no optional markers in class)
  _id?: ObjectId
  required_field: string
  optional_field: string          // No ? in class properties
  enum_field: EnumType           // No ? in class properties
  array_field: ObjectId[]        // No ? in class properties
  nested_object: ComplexType     // No ? in class properties
  _destroy: boolean              // No ? in class properties
  created_at?: Date              // Timestamps remain optional
  updated_at?: Date              // Timestamps remain optional

  constructor(entity: EntitySchema) {
    const date = new Date()        // Single date instance for consistency

    // Direct assignment for required fields
    this._id = entity._id
    this.required_field = entity.required_field

    // Default value assignment for optional fields
    this.optional_field = entity.optional_field || ''
    this.enum_field = entity.enum_field || EnumType.DefaultValue
    this.array_field = entity.array_field || []
    this.nested_object = entity.nested_object || ({} as ComplexType)
    this._destroy = entity._destroy || false

    // Timestamp handling
    this.created_at = entity.created_at || date
    this.updated_at = entity.updated_at || date
  }
}
```

## Import Organization Standards

### ✅ Import Order and Grouping
```typescript
// 1. External packages (MongoDB driver)
import { ObjectId } from 'mongodb'

// 2. Internal enums and constants
import { Role, UserVerifyStatus, BoardType } from '~/constants/enums'

// 3. Extension types and complex objects
import { Comment, Attachment, BoardInvitation } from '~/models/Extensions'
```

## Field Definition Patterns

### ✅ MongoDB ObjectId Fields
```typescript
// Primary key - always optional in interface, optional in class
_id?: ObjectId

// Foreign key references - required in both interface and class
user_id: ObjectId
board_id: ObjectId
column_id: ObjectId

// Array of ObjectId references - optional in interface, required in class with default
column_order_ids?: ObjectId[]     // Interface
column_order_ids: ObjectId[]      // Class with default: []
```

### ✅ String Fields
```typescript
// Required strings - no defaults
title: string
email: string
password: string

// Optional strings - with empty string defaults
description?: string              // Interface
description: string               // Class with default: ''

avatar?: string                   // Interface  
avatar: string                    // Class with default: ''
```

### ✅ Boolean Fields
```typescript
// Optional booleans with defaults
is_active?: boolean               // Interface
is_active: boolean                // Class with default: true

_destroy?: boolean                // Interface (soft delete)
_destroy: boolean                 // Class with default: false
```

### ✅ Enum Fields
```typescript
// Enum fields with defaults
role?: Role                       // Interface
role: Role                        // Class with default: Role.Client

verify?: UserVerifyStatus         // Interface
verify: UserVerifyStatus          // Class with default: UserVerifyStatus.Unverified
```

### ✅ Date Fields
```typescript
// Optional dates with current date defaults
created_at?: Date                 // Interface
created_at?: Date                 // Class (remains optional)

updated_at?: Date                 // Interface
updated_at?: Date                 // Class (remains optional)

// Nullable dates for business logic
due_date?: Date | null            // Interface
due_date: Date | null             // Class with default: null
```

### ✅ Array Fields
```typescript
// ObjectId arrays
members?: ObjectId[]              // Interface
members: ObjectId[]               // Class with default: []

// Complex object arrays
comments?: Comment[]              // Interface
comments: Comment[]               // Class with default: []

attachments?: Attachment[]        // Interface
attachments: Attachment[]         // Class with default: []
```

### ✅ Complex Nested Objects
```typescript
// Optional complex objects with empty object defaults
board_invitation?: BoardInvitation    // Interface
board_invitation: BoardInvitation     // Class with default: ({} as BoardInvitation)
```

## Constructor Implementation Patterns

### ✅ Date Handling
```typescript
constructor(entity: EntitySchema) {
  const date = new Date()              // Single date instance for consistency
  
  // Use same date for both created_at and updated_at
  this.created_at = entity.created_at || date
  this.updated_at = entity.updated_at || date
}
```

### ✅ Default Value Assignment
```typescript
// String defaults
this.description = entity.description || ''
this.avatar = entity.avatar || ''

// Boolean defaults
this.is_active = entity.is_active || true
this._destroy = entity._destroy || false

// Enum defaults
this.role = entity.role || Role.Client
this.verify = entity.verify || UserVerifyStatus.Unverified

// Array defaults
this.members = entity.members || []
this.column_order_ids = entity.column_order_ids || []

// Complex object defaults
this.board_invitation = entity.board_invitation || ({} as BoardInvitation)

// Null defaults for business logic
this.due_date = entity.due_date || null
this.is_completed = entity.is_completed || null
```

### ✅ Special Data Type Handling
```typescript
// JWT timestamp conversion (RefreshToken example)
this.iat = new Date(refreshToken.iat * 1000)    // Convert Unix timestamp
this.exp = new Date(refreshToken.exp * 1000)    // Convert Unix timestamp
```

## Standard Field Patterns

### ✅ Common System Fields
Every schema should include these standard fields:

```typescript
// Primary key
_id?: ObjectId

// Soft delete support
_destroy?: boolean                // Interface
_destroy: boolean                 // Class with default: false

// Audit timestamps
created_at?: Date                 // Interface
created_at?: Date                 // Class (optional, defaults to new Date())

updated_at?: Date                 // Interface  
updated_at?: Date                 // Class (optional, defaults to new Date())
```

### ✅ Relationship Fields
```typescript
// Parent-child relationships
board_id: ObjectId               // Required foreign key
column_id: ObjectId              // Required foreign key
user_id: ObjectId                // Required foreign key

// Many-to-many relationships
owners: ObjectId[]               // Required array with default: []
members: ObjectId[]              // Optional array with default: []

// Ordered relationships
column_order_ids: ObjectId[]     // Maintain order of related entities
card_order_ids: ObjectId[]       // Array of ObjectIds for ordering
```

### ✅ Business Logic Fields
```typescript
// Status and state management
is_active: boolean               // Entity state
is_completed: boolean | null     // Nullable business state
verify: UserVerifyStatus         // Enum-based status

// Authentication and security
email_verify_token: string       // Token fields as strings
forgot_password_token: string    // Empty string defaults
invite_token: string             // Security tokens

// Content and metadata
title: string                    // Required content
description: string              // Optional content with empty default
cover_photo: string              // Optional media with empty default
```

## Complex Object Integration

### ✅ Extension Object Usage
Complex nested objects are defined in [Extensions.ts](mdc:src/models/Extensions.ts):

```typescript
// Import from Extensions
import { Comment, Attachment, BoardInvitation } from '~/models/Extensions'

// Use in schema
comments: Comment[]              // Array of complex objects
attachments: Attachment[]        // Array with structured data
board_invitation: BoardInvitation // Single complex object
```

### ✅ Extension Object Patterns
```typescript
// Comment structure with user context
export interface Comment {
  comment_id: ObjectId           // Unique identifier
  user_id: string                // User reference
  user_email: string             // Denormalized user data
  user_avatar: string            // Cached user information
  user_display_name: string      // Display information
  content: string                // Main content
  commented_at: Date             // Timestamp
}

// Attachment with discriminated union pattern
export interface Attachment {
  attachment_id: ObjectId        // Unique identifier
  type: AttachmentType           // Discriminator enum
  uploaded_by: string            // User context
  file: { /* file-specific fields */ }     // Type-specific data
  link: { /* link-specific fields */ }     // Type-specific data
  added_at: Date                 // Timestamp
}
```

## Database Service Integration

Schemas integrate with [database.services.ts](mdc:src/services/database.services.ts):

```typescript
// Collection getter pattern
get users(): Collection<User> {
  return this.db.collection<User>(envConfig.dbUsersCollection as string)
}

// Usage in services
const user = new User(userData)
await databaseService.users.insertOne(user)
```

## Enum Integration Patterns

### ✅ Enum Usage from Constants
```typescript
// Import specific enums
import { Role, UserVerifyStatus, BoardType } from '~/constants/enums'

// Use enums as types and defaults
role: Role                       // Type annotation
role: entity.role || Role.Client // Default value assignment

verify: UserVerifyStatus         // Type annotation  
verify: entity.verify || UserVerifyStatus.Unverified // Default
```

### ✅ Enum Default Values
```typescript
// String-based enums
BoardType.Public                 // Default for board type
Role.Client                      // Default user role

// Number-based enums  
UserVerifyStatus.Unverified      // Default verification status
InvitationType.BoardInvitation   // Default invitation type
```

## Validation and Type Safety

### ✅ TypeScript Interface Benefits
- **Input validation**: Interface defines expected input structure
- **Optional field handling**: Clear distinction between required and optional
- **Type safety**: Compile-time validation of field types
- **IDE support**: IntelliSense and auto-completion

### ✅ Class Implementation Benefits
- **Runtime instantiation**: Consistent object creation
- **Default value enforcement**: Guaranteed field initialization
- **Method attachment**: Can add instance methods if needed
- **MongoDB compatibility**: Direct insertion into collections

## Anti-Patterns to Avoid

### ❌ Incorrect Patterns
```typescript
// Don't use optional fields in class properties (except timestamps)
class User {
  email?: string                 // ❌ Should be required in class
}

// Don't mix default assignment patterns
this.title = title || ''         // ❌ Should use entity.title
this.title = entity?.title || '' // ❌ Unnecessary optional chaining

// Don't use different date instances
this.created_at = new Date()     // ❌ Should use shared date variable
this.updated_at = new Date()     // ❌ Different timestamp

// Don't skip the interface
export default class User { }    // ❌ Missing TypeScript interface

// Don't use wrong import paths
import User from './User'        // ❌ Should use '~/models/schemas/User.schema'
```

### ❌ Incorrect File Organization
```typescript
// Don't place schemas outside the schemas directory
src/models/User.ts               // ❌ Wrong location
src/schemas/User.schema.ts       // ❌ Wrong directory

// Don't use inconsistent naming
src/models/schemas/user.schema.ts      // ❌ Should be PascalCase
src/models/schemas/UserSchema.ts       // ❌ Should include .schema
src/models/schemas/Users.schema.ts     // ❌ Should be singular
```

## Database Service Collection Mapping

Each schema corresponds to a collection getter in [database.services.ts](mdc:src/services/database.services.ts):

```typescript
// Schema File                    → Collection Getter
User.schema.ts                   → get users()
Board.schema.ts                  → get boards()  
Card.schema.ts                   → get cards()
Column.schema.ts                 → get columns()
Invitation.schema.ts             → get invitations()
RefreshToken.schema.ts           → get refreshTokens()
```

This pattern ensures type-safe database operations throughout the application while maintaining clean separation between data models and database access logic.
